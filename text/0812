10 배열
 - 배열 : 같은 성격을 띤 다수의 데이터를 한번에 다루기 위한 데이터 타입
 - 구조 : 데이터 형식[] 배열이름 = new 데이터 형식[ 용량 ];
 - 각 요소 안에 있는 데이터를 다룰 때는 [와]를 붙이고 괄호안에 인덱스를 적어준다.
    - 인덱스는 1이 아닌 0부터 시작한다.
 - 마지막 인덱스에 접근하기 위해선 배열의 길이에 -1을 빼야하는 번거로움이 있다.
    - 이를 위해 System.Index 형식과 ^연산자가 생겼다.
        - ex) Scores[^1] == Scores[Scores.Lenght-1] 

 - 초기화 방법
     - 1. 배열의 형식과 길이을 명시
         - ex) string[] array1 = new string[3] { "안녕", "Hello", "Halo" };
     - 2. 배열의 길이을 생략    
         - ex) string[] array2 = new string[] { "안녕", "Hello", "Halo" };
     - 3. 배열의 형식과 길이 모두 생략
         - ex) string[] array3 = { "안녕", "Hello", "Halo" };
    - 코딩 할떄 세번째 방법이 편할수도 있지만 다른사람과 작업 할 때는 상대방이 읽기 편하도록 첫번쨰 방법을 쓰는것이 좋을수 있다.

 - System.Array
    - 배열에 기반되는 형식
    - 정적 메소드
        - Sort() : 배열 정렬
        - BinarySearch<T>() : 이진 탐색
        - IndexOf() : 배열에서 특정데이터의 인덱스 반환
        - TrueForAll() : 배열의 모든 요소가 조건에 부합한지 여부 반환
        - FindIndex<T>() : 특정 조건에 맞는 첫번째 요소의 인덱스 반환
        - Resize<T>() : 크기 재조정
        - Clear() : 초기화
        - ForEach() : 배열의 모든 요소에 동일한 작업 수행
        - Copy<T>() : 복사
    - 인스턴스 메소드
        - GetLength() : 지정한 차원의 길이 반환
    - 프로퍼티
        - Length : 배열의 길이 반환
        - Rank : 배열의 차원 반환    

- 배열 분할
    - System.Range를 이용해 배열의 범위를 지정할 수 있다.
        - ex) Scores[0..3] == Scores[0], Scores[1], Scores[2]

- 2차원 배열
    - 1차원 요소를 배열로 갖는 배열
    - 구조 : 데이터 형식[,] 배열이름 = new 데이터 형식[ 2차원길이, 1차원길이 ];

 - 다차원 배열
    - 차원이 둘 이상인 배열
        - ex) int[,,] array = new int[4,3,2];

 - 가변 배열
    - 다양한 길이의 배열을 요소로 갖는 다차원 배열
    - 구조 : 데이터형식[][] 배열이름 = new 데이터형식[가변 배열의 용량][];

 - 컬랙션
    - 같은 성격을 띈 데이터의 모음을 담는 자료구조
    - 1. ArrayList
        - 배열과 비슷하지만, 용량을 미리 저장할 필요 없이 자동으로 그 용량이 늘어나거나 줄어든다.
        - 중요 메소드
            - 1. Add() : 가장 마지막 요소 뒤에 새 요소 추가
            - 2. RemoveAt() : 특정 인덱스에 있는 요소 제거
            - 3. Insert() : 원하는 위치에 새 요소 삽입
    - 2. Queue
        - 먼저 들어온 데이터가 먼저 나간다.
        - 중요 메소드
            - 1. Enqueue() : 마지막 요소 뒤에 새요소 추가
            - 2. Dequeue() : 제일 앞의 요소 반환후 제거
    - 3. Stack
        - 먼저 들어온 데이터가 나중에나가고, 나중에 들어온 데이터가 먼저 나간다.
        - 중요 메소드
            - 1. Push() : 가장 마지막 요소 뒤에 새 요소 추가
            - 2. Pop() : 가장 마지막 요소 반환후 제거
    - 4. HashTable
        - 키와 값의 쌍으로 이루어진 데이터 모음.
        - 인덱스 대신 키데이터를 사용

 - 초기화 방법 
    - 배열을 통한 초기화가 가능하다.
        - ex)   int[] arr = { 123, 456 ,789 };
                ArrayList list = new ArrayList(arr); //123, 456, 789

    
 - 인덱서
    - 인덱스를 이용해 객체 내의 데이터에 접근하게 해주는 프로퍼티. 객체를 마치 배열처럼 사용하게 해준다.
    - 선언 방법
        class 클래스 이름
        {
            한정자 인덱서 형식 this[형식 index]
            {
                get{ index를 이용하여 내부 데이터 반환 }
                set{ index를 이용하여 내부 데이터 저장 }
            }
        }




# .NET
- CLR과 클래스 라이브러리 세트를 의미함
- CLR은 C# 코드를 컴파일 한 결과물인 IL 코드를 다시 해당 플랫폼에 맞는 코드로 변환하여 하나의 소스코드로 여러 플랫폼을 지원함
- .NET에는 공용 타입 시스템이 있다
    > 모든 타입은 값 타입과 참조 타입으로 분류
    > 모든 타입은 System.Object 타입을 상속 받음
    > 이를 명확히 인지하고, 박싱과 언박싱을 피하도록 코드를 작성해야 함.

# 가비지 컬렉션
- 메모리를 수동으로 관리하는 것은 여러 문제점이 있음
    > 메모리 누수 / 이중 해제 / 섣부른 해제
- 메모리를 자동으로 관리하는 기술
- 가비지로 가정하는 방법
    > 추적 : 도달가능성으로 가비지 판단
    > 참조 카운팅  : 참조 횟수로 가비지 판단
- 표준 .NET은 세대별 가비지 컬렉션을 사용
    > 메모리 할당은 0세대에서만 일어남
    > 메모리 해제 시, 가비지가 아닌 메모리는 윗세대로 승격됨

# .NET: Unity
- Unity의 스크립트 백엔드(스크립트 환경)는 Mono, IL2CPP 두 개가 있음. => 여기서 모든 차이가 발생
- 세대별로 관리하지 않으며, 메모리 압축 또한 없기 때문에 메모리 단편화가 쉽게 일어나고, 힙도 쉽게 확장된다. 그래서 최적화 이슈가 발생할 수 있다.


































CLR C#

boxing 
 - 박싱(Boxing)은 값 타입을 object 타입(int->object) 또는 값 타입에서 구현된 임의의 인터페이스 타입(struct:interface->interface // upcasting)으로 변환하는 프로세스

레퍼런스 참고시.net standard 2.0 참고