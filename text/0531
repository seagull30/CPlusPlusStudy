# C++ 프로그래밍
- 오버로딩(Overloadding) : 함수를 작성할 때 동일한 이름을 적는 것
    - 단, 매개변수 목록이 달라야 한다.

- explicit 한정자 : 매개변수가 하나인 생성자가 있다면, 그 매개변수 타입에서 클래스 타입으로의 암시적 변환이 일어나는데, explicit 한정자를 사용하면 암시적 변환을 막을 수 있다.
    - 암시적 변환은 오류의 온상이다.

- 복사 할당 연산자 : 하나의 매개변수만 가지며, 그 매개변수의 타입이 클래스 타입과 동일한 할당 연산자. 복사 할당 연산자의 용도는 = 연산자를 이용해서 복사하기 위함.

- 기본 메소드에 대해서는 default나 delete 키워드를 사용해서 컴파일러가 생성해주는 함수를 사용하거나 삭제 가능

- 상속은 클래스를 정의할 때 {자식 클래스} : {부모 클래스} 형태로 쓰면 된다.
    - 상속을 할 때 접근 한정자를 같이 써줄 수 있음.
    - public 상속 : 부모 클래스의 public 맴버를 자식 클래스의 public 맴버로 가져오고, 부모 클래스의 protected 맴버를 자식 클래스의 protected 맴버로 가져옴
    - 상속 관계가 있는 객체는 생성은 부모에서 자식 순으로, 소멸은 자식에서 부모 순으로 이뤄짐.
    - protected 한정자 : 클래스 내부 및 자식 클래스만 접근 가능
    - C++은 다중 상속이 가능하지만 죽음의 다이아몬드를 격지 않도록 조심해서 다뤄야 함.

- 가상 함수 : 다형성을 가질 수 있는 함수
    - 메소드 앞에 virtual 한정자를 붙이면 됨.
    - 가상 함수를 재정의하는 것을 오버라이딩(overriding)
    - 가상 함수를 이용해 다형성을 사용하려면 업캐스팅해서 상위 타입의 포인터 혹은 래퍼런스로 하위 타입의 객체를 다뤄야 함.
        - 업캐스팅 때문에 실제로 내가 어떤 타입의 객체를 가리키는지 모름. 그래서 다형성이 적용되는 것.
        - 가상 함수는 동적 바인딩이며, 가상 함수 테이블과 가상 함수 포인터를 이용해 동작